# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_goldenrecord')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_goldenrecord')
    _goldenrecord = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_goldenrecord', [dirname(__file__)])
        except ImportError:
            import _goldenrecord
            return _goldenrecord
        try:
            _mod = imp.load_module('_goldenrecord', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _goldenrecord = swig_import_helper()
    del swig_import_helper
else:
    import _goldenrecord
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Aggregator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aggregator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Aggregator, name)
    __repr__ = _swig_repr
    __swig_getmethods__["rules"] = _goldenrecord.Aggregator_rules_get
    if _newclass:
        rules = _swig_property(_goldenrecord.Aggregator_rules_get)
    __swig_setmethods__["ruleDir"] = _goldenrecord.Aggregator_ruleDir_set
    __swig_getmethods__["ruleDir"] = _goldenrecord.Aggregator_ruleDir_get
    if _newclass:
        ruleDir = _swig_property(_goldenrecord.Aggregator_ruleDir_get, _goldenrecord.Aggregator_ruleDir_set)
    __swig_setmethods__["ruleGroup"] = _goldenrecord.Aggregator_ruleGroup_set
    __swig_getmethods__["ruleGroup"] = _goldenrecord.Aggregator_ruleGroup_get
    if _newclass:
        ruleGroup = _swig_property(_goldenrecord.Aggregator_ruleGroup_get, _goldenrecord.Aggregator_ruleGroup_set)
    __swig_setmethods__["ruleStatus"] = _goldenrecord.Aggregator_ruleStatus_set
    __swig_getmethods__["ruleStatus"] = _goldenrecord.Aggregator_ruleStatus_get
    if _newclass:
        ruleStatus = _swig_property(_goldenrecord.Aggregator_ruleStatus_get, _goldenrecord.Aggregator_ruleStatus_set)
    __swig_setmethods__["transformations"] = _goldenrecord.Aggregator_transformations_set
    __swig_getmethods__["transformations"] = _goldenrecord.Aggregator_transformations_get
    if _newclass:
        transformations = _swig_property(_goldenrecord.Aggregator_transformations_get, _goldenrecord.Aggregator_transformations_set)
    __swig_setmethods__["structures"] = _goldenrecord.Aggregator_structures_set
    __swig_getmethods__["structures"] = _goldenrecord.Aggregator_structures_get
    if _newclass:
        structures = _swig_property(_goldenrecord.Aggregator_structures_get, _goldenrecord.Aggregator_structures_set)
    __swig_setmethods__["groupRules"] = _goldenrecord.Aggregator_groupRules_set
    __swig_getmethods__["groupRules"] = _goldenrecord.Aggregator_groupRules_get
    if _newclass:
        groupRules = _swig_property(_goldenrecord.Aggregator_groupRules_get, _goldenrecord.Aggregator_groupRules_set)
    __swig_setmethods__["format_group_cluster_ids"] = _goldenrecord.Aggregator_format_group_cluster_ids_set
    __swig_getmethods__["format_group_cluster_ids"] = _goldenrecord.Aggregator_format_group_cluster_ids_get
    if _newclass:
        format_group_cluster_ids = _swig_property(_goldenrecord.Aggregator_format_group_cluster_ids_get, _goldenrecord.Aggregator_format_group_cluster_ids_set)
    __swig_setmethods__["format_group_rule_ids"] = _goldenrecord.Aggregator_format_group_rule_ids_set
    __swig_getmethods__["format_group_rule_ids"] = _goldenrecord.Aggregator_format_group_rule_ids_get
    if _newclass:
        format_group_rule_ids = _swig_property(_goldenrecord.Aggregator_format_group_rule_ids_get, _goldenrecord.Aggregator_format_group_rule_ids_set)
    __swig_setmethods__["format_group_rules"] = _goldenrecord.Aggregator_format_group_rules_set
    __swig_getmethods__["format_group_rules"] = _goldenrecord.Aggregator_format_group_rules_get
    if _newclass:
        format_group_rules = _swig_property(_goldenrecord.Aggregator_format_group_rules_get, _goldenrecord.Aggregator_format_group_rules_set)
    __swig_setmethods__["global_const_terms"] = _goldenrecord.Aggregator_global_const_terms_set
    __swig_getmethods__["global_const_terms"] = _goldenrecord.Aggregator_global_const_terms_get
    if _newclass:
        global_const_terms = _swig_property(_goldenrecord.Aggregator_global_const_terms_get, _goldenrecord.Aggregator_global_const_terms_set)
    __swig_setmethods__["local_const_terms"] = _goldenrecord.Aggregator_local_const_terms_set
    __swig_getmethods__["local_const_terms"] = _goldenrecord.Aggregator_local_const_terms_get
    if _newclass:
        local_const_terms = _swig_property(_goldenrecord.Aggregator_local_const_terms_get, _goldenrecord.Aggregator_local_const_terms_set)
    __swig_setmethods__["cluster_sizes"] = _goldenrecord.Aggregator_cluster_sizes_set
    __swig_getmethods__["cluster_sizes"] = _goldenrecord.Aggregator_cluster_sizes_get
    if _newclass:
        cluster_sizes = _swig_property(_goldenrecord.Aggregator_cluster_sizes_get, _goldenrecord.Aggregator_cluster_sizes_set)
    __swig_setmethods__["forward_list"] = _goldenrecord.Aggregator_forward_list_set
    __swig_getmethods__["forward_list"] = _goldenrecord.Aggregator_forward_list_get
    if _newclass:
        forward_list = _swig_property(_goldenrecord.Aggregator_forward_list_get, _goldenrecord.Aggregator_forward_list_set)
    __swig_setmethods__["ordered"] = _goldenrecord.Aggregator_ordered_set
    __swig_getmethods__["ordered"] = _goldenrecord.Aggregator_ordered_get
    if _newclass:
        ordered = _swig_property(_goldenrecord.Aggregator_ordered_get, _goldenrecord.Aggregator_ordered_set)

    def __init__(self, allRules: 'vector< pair< pair< string,string >,int > > const &'):
        this = _goldenrecord.new_Aggregator(allRules)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Aggregate(self) -> "void":
        return _goldenrecord.Aggregator_Aggregate(self)

    def GroupAggregate(self) -> "void":
        return _goldenrecord.Aggregator_GroupAggregate(self)

    def AggregateStructure(self) -> "void":
        return _goldenrecord.Aggregator_AggregateStructure(self)

    def NoAggregatation(self) -> "void":
        return _goldenrecord.Aggregator_NoAggregatation(self)

    def Group(self) -> "void":
        return _goldenrecord.Aggregator_Group(self)

    def RandomGroup(self) -> "void":
        return _goldenrecord.Aggregator_RandomGroup(self)

    def CalConstantTerms(self) -> "void":
        return _goldenrecord.Aggregator_CalConstantTerms(self)
    __swig_destroy__ = _goldenrecord.delete_Aggregator
    __del__ = lambda self: None
Aggregator_swigregister = _goldenrecord.Aggregator_swigregister
Aggregator_swigregister(Aggregator)

MAX_CSV_FILE_SIZE = _goldenrecord.MAX_CSV_FILE_SIZE
class CSVReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSVReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSVReader, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _goldenrecord.new_CSVReader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reading(self, datafilespath: 'string &', normalize: 'bool') -> "bool":
        return _goldenrecord.CSVReader_reading(self, datafilespath, normalize)

    def get_max_val_len(self) -> "int":
        return _goldenrecord.CSVReader_get_max_val_len(self)
    __swig_destroy__ = _goldenrecord.delete_CSVReader
    __del__ = lambda self: None
CSVReader_swigregister = _goldenrecord.CSVReader_swigregister
CSVReader_swigregister(CSVReader)

class Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["tables"] = _goldenrecord.Reader_tables_set
    __swig_getmethods__["tables"] = _goldenrecord.Reader_tables_get
    if _newclass:
        tables = _swig_property(_goldenrecord.Reader_tables_get, _goldenrecord.Reader_tables_set)

    def strNormalize(self, s: 'std::string &') -> "void":
        return _goldenrecord.Reader_strNormalize(self, s)

    def reading(self, datafilespath: 'std::string &', normalize: 'bool') -> "bool":
        return _goldenrecord.Reader_reading(self, datafilespath, normalize)

    def get_max_val_len(self) -> "int":
        return _goldenrecord.Reader_get_max_val_len(self)
    __swig_destroy__ = _goldenrecord.delete_Reader
    __del__ = lambda self: None
Reader_swigregister = _goldenrecord.Reader_swigregister
Reader_swigregister(Reader)

class Locator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Locator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Locator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _goldenrecord.Locator_id_set
    __swig_getmethods__["id"] = _goldenrecord.Locator_id_get
    if _newclass:
        id = _swig_property(_goldenrecord.Locator_id_get, _goldenrecord.Locator_id_set)
    __swig_setmethods__["beg"] = _goldenrecord.Locator_beg_set
    __swig_getmethods__["beg"] = _goldenrecord.Locator_beg_get
    if _newclass:
        beg = _swig_property(_goldenrecord.Locator_beg_get, _goldenrecord.Locator_beg_set)
    __swig_setmethods__["end"] = _goldenrecord.Locator_end_set
    __swig_getmethods__["end"] = _goldenrecord.Locator_end_get
    if _newclass:
        end = _swig_property(_goldenrecord.Locator_end_get, _goldenrecord.Locator_end_set)

    def __init__(self, v: 'int', b: 'int', e: 'int'):
        this = _goldenrecord.new_Locator(v, b, e)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, e: 'Locator') -> "bool":
        return _goldenrecord.Locator___lt__(self, e)

    def __gt__(self, e: 'Locator') -> "bool":
        return _goldenrecord.Locator___gt__(self, e)

    def __eq__(self, e: 'Locator') -> "bool":
        return _goldenrecord.Locator___eq__(self, e)
    __swig_destroy__ = _goldenrecord.delete_Locator
    __del__ = lambda self: None
Locator_swigregister = _goldenrecord.Locator_swigregister
Locator_swigregister(Locator)

class LocatorHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocatorHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocatorHash, name)
    __repr__ = _swig_repr

    def __call__(self, o: 'Locator') -> "size_t":
        return _goldenrecord.LocatorHash___call__(self, o)

    def __init__(self):
        this = _goldenrecord.new_LocatorHash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_LocatorHash
    __del__ = lambda self: None
LocatorHash_swigregister = _goldenrecord.LocatorHash_swigregister
LocatorHash_swigregister(LocatorHash)

class PairLocatorHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairLocatorHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairLocatorHash, name)
    __repr__ = _swig_repr

    def __call__(self, o: 'pair< Locator,Locator > const &') -> "size_t":
        return _goldenrecord.PairLocatorHash___call__(self, o)

    def __init__(self):
        this = _goldenrecord.new_PairLocatorHash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_PairLocatorHash
    __del__ = lambda self: None
PairLocatorHash_swigregister = _goldenrecord.PairLocatorHash_swigregister
PairLocatorHash_swigregister(PairLocatorHash)

class TripleHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TripleHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TripleHash, name)
    __repr__ = _swig_repr

    def __call__(self, k: 'triple const &') -> "size_t":
        return _goldenrecord.TripleHash___call__(self, k)

    def __init__(self):
        this = _goldenrecord.new_TripleHash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_TripleHash
    __del__ = lambda self: None
TripleHash_swigregister = _goldenrecord.TripleHash_swigregister
TripleHash_swigregister(TripleHash)

class Rules(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rules, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rules, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table"] = _goldenrecord.Rules_table_set
    __swig_getmethods__["table"] = _goldenrecord.Rules_table_get
    if _newclass:
        table = _swig_property(_goldenrecord.Rules_table_get, _goldenrecord.Rules_table_set)
    __swig_setmethods__["col_id"] = _goldenrecord.Rules_col_id_set
    __swig_getmethods__["col_id"] = _goldenrecord.Rules_col_id_get
    if _newclass:
        col_id = _swig_property(_goldenrecord.Rules_col_id_get, _goldenrecord.Rules_col_id_set)
    __swig_setmethods__["values"] = _goldenrecord.Rules_values_set
    __swig_getmethods__["values"] = _goldenrecord.Rules_values_get
    if _newclass:
        values = _swig_property(_goldenrecord.Rules_values_get, _goldenrecord.Rules_values_set)
    __swig_setmethods__["clusters"] = _goldenrecord.Rules_clusters_set
    __swig_getmethods__["clusters"] = _goldenrecord.Rules_clusters_get
    if _newclass:
        clusters = _swig_property(_goldenrecord.Rules_clusters_get, _goldenrecord.Rules_clusters_set)
    __swig_setmethods__["id_mappings"] = _goldenrecord.Rules_id_mappings_set
    __swig_getmethods__["id_mappings"] = _goldenrecord.Rules_id_mappings_get
    if _newclass:
        id_mappings = _swig_property(_goldenrecord.Rules_id_mappings_get, _goldenrecord.Rules_id_mappings_set)
    __swig_setmethods__["counts"] = _goldenrecord.Rules_counts_set
    __swig_getmethods__["counts"] = _goldenrecord.Rules_counts_get
    if _newclass:
        counts = _swig_property(_goldenrecord.Rules_counts_get, _goldenrecord.Rules_counts_set)
    __swig_setmethods__["row_to_cluster"] = _goldenrecord.Rules_row_to_cluster_set
    __swig_getmethods__["row_to_cluster"] = _goldenrecord.Rules_row_to_cluster_get
    if _newclass:
        row_to_cluster = _swig_property(_goldenrecord.Rules_row_to_cluster_get, _goldenrecord.Rules_row_to_cluster_set)
    __swig_setmethods__["rule_types"] = _goldenrecord.Rules_rule_types_set
    __swig_getmethods__["rule_types"] = _goldenrecord.Rules_rule_types_get
    if _newclass:
        rule_types = _swig_property(_goldenrecord.Rules_rule_types_get, _goldenrecord.Rules_rule_types_set)
    __swig_getmethods__["enable_auto_confirm_rules"] = _goldenrecord.Rules_enable_auto_confirm_rules_get
    if _newclass:
        enable_auto_confirm_rules = _swig_property(_goldenrecord.Rules_enable_auto_confirm_rules_get)
    __swig_getmethods__["token_delim"] = _goldenrecord.Rules_token_delim_get
    if _newclass:
        token_delim = _swig_property(_goldenrecord.Rules_token_delim_get)
    __swig_setmethods__["op_log"] = _goldenrecord.Rules_op_log_set
    __swig_getmethods__["op_log"] = _goldenrecord.Rules_op_log_get
    if _newclass:
        op_log = _swig_property(_goldenrecord.Rules_op_log_get, _goldenrecord.Rules_op_log_set)
    __swig_setmethods__["termRules"] = _goldenrecord.Rules_termRules_set
    __swig_getmethods__["termRules"] = _goldenrecord.Rules_termRules_get
    if _newclass:
        termRules = _swig_property(_goldenrecord.Rules_termRules_get, _goldenrecord.Rules_termRules_set)
    __swig_setmethods__["rule_locations"] = _goldenrecord.Rules_rule_locations_set
    __swig_getmethods__["rule_locations"] = _goldenrecord.Rules_rule_locations_get
    if _newclass:
        rule_locations = _swig_property(_goldenrecord.Rules_rule_locations_get, _goldenrecord.Rules_rule_locations_set)
    __swig_setmethods__["termRulesApplicable"] = _goldenrecord.Rules_termRulesApplicable_set
    __swig_getmethods__["termRulesApplicable"] = _goldenrecord.Rules_termRulesApplicable_get
    if _newclass:
        termRulesApplicable = _swig_property(_goldenrecord.Rules_termRulesApplicable_get, _goldenrecord.Rules_termRulesApplicable_set)
    __swig_setmethods__["valTokens"] = _goldenrecord.Rules_valTokens_set
    __swig_getmethods__["valTokens"] = _goldenrecord.Rules_valTokens_get
    if _newclass:
        valTokens = _swig_property(_goldenrecord.Rules_valTokens_get, _goldenrecord.Rules_valTokens_set)
    __swig_setmethods__["invIndex"] = _goldenrecord.Rules_invIndex_set
    __swig_getmethods__["invIndex"] = _goldenrecord.Rules_invIndex_get
    if _newclass:
        invIndex = _swig_property(_goldenrecord.Rules_invIndex_get, _goldenrecord.Rules_invIndex_set)

    def __init__(self, t: 'Table', cid: 'int', v: 'vector< std::string > const &', c: 'vector< vector< int > > const &', m: 'vector< vector< int > > const &', f: 'vector< int > const &', rtype: 'int', confirm: 'bool'):
        this = _goldenrecord.new_Rules(t, cid, v, c, m, f, rtype, confirm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GenerateRules(self) -> "void":
        return _goldenrecord.Rules_GenerateRules(self)

    def RankRules(self, rules: 'unordered_map< pair< std::string,std::string >,int,pair_hash > &', tops: 'vector< pair< pair< std::string,std::string >,int > > &', limit: 'int'=10) -> "void":
        return _goldenrecord.Rules_RankRules(self, rules, tops, limit)

    def ApplyGroupRuleComplex(self, rules: 'vector< pair< pair< std::string,std::string >,int > > const &', ruleDir: 'vector< bool > const &', ruleGroup: 'vector< int > const &', ruleStatus: 'vector< int > &', groupRules: 'vector< vector< int > > const &', groupStatus: 'vector< int > &', transformations: 'vector< Path > const &', modification: 'vector< vector< tuple< int,int,int > > > &', max_group_id: 'int', tmp: 'std::string') -> "bool":
        return _goldenrecord.Rules_ApplyGroupRuleComplex(self, rules, ruleDir, ruleGroup, ruleStatus, groupRules, groupStatus, transformations, modification, max_group_id, tmp)

    def ShowNextCluster(self, rules: 'vector< pair< pair< std::string,std::string >,int > > &', ruleDir: 'vector< bool > &', ruleGroup: 'vector< int > &', ruleStatus: 'vector< int > &', groupRules: 'vector< vector< int > > &', groupStatus: 'vector< int > &', transformations: 'vector< Path > &', structures: 'vector< pair< std::string,std::string > > &', modification: 'vector< vector< tuple< int,int,int > > > &') -> "std::string":
        return _goldenrecord.Rules_ShowNextCluster(self, rules, ruleDir, ruleGroup, ruleStatus, groupRules, groupStatus, transformations, structures, modification)

    def ApplyRule(self, rules: 'vector< pair< pair< std::string,std::string >,int > > &', ruleDir: 'vector< bool > &', ruleGroup: 'vector< int > &', ruleStatus: 'vector< int > &', groupRules: 'vector< vector< int > > &', groupStatus: 'vector< int > &', transformations: 'vector< Path > &', structures: 'vector< pair< std::string,std::string > > &', modification: 'vector< vector< tuple< int,int,int > > > &', max_group_id: 'int', tmp: 'std::string') -> "bool":
        return _goldenrecord.Rules_ApplyRule(self, rules, ruleDir, ruleGroup, ruleStatus, groupRules, groupStatus, transformations, structures, modification, max_group_id, tmp)
    __swig_destroy__ = _goldenrecord.delete_Rules
    __del__ = lambda self: None
Rules_swigregister = _goldenrecord.Rules_swigregister
Rules_swigregister(Rules)

SUBSTR_SCORE = _goldenrecord.SUBSTR_SCORE
CPOS_SCORE = _goldenrecord.CPOS_SCORE
CONSTR_SCORE = _goldenrecord.CONSTR_SCORE
CONSTANT_TOKEN_RATIO = _goldenrecord.CONSTANT_TOKEN_RATIO
NEG_INF = _goldenrecord.NEG_INF
REGEX_SIZE = _goldenrecord.REGEX_SIZE
ALL_REGEX_SIZE = _goldenrecord.ALL_REGEX_SIZE
PROPER_CASE = _goldenrecord.PROPER_CASE
CAPS = _goldenrecord.CAPS
LOWER_CASE = _goldenrecord.LOWER_CASE
DIGITS = _goldenrecord.DIGITS
ALPHABETS = _goldenrecord.ALPHABETS
ALPHANUMERIC = _goldenrecord.ALPHANUMERIC
WHITESPACE = _goldenrecord.WHITESPACE
PUNCT = _goldenrecord.PUNCT
CONSTANT = _goldenrecord.CONSTANT
START_T = _goldenrecord.START_T
END_T = _goldenrecord.END_T
SPECIAL_CASE_FOR_DAG_EDGE = _goldenrecord.SPECIAL_CASE_FOR_DAG_EDGE
class VLabel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VLabel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pid"] = _goldenrecord.VLabel_pid_set
    __swig_getmethods__["pid"] = _goldenrecord.VLabel_pid_get
    if _newclass:
        pid = _swig_property(_goldenrecord.VLabel_pid_get, _goldenrecord.VLabel_pid_set)
    __swig_setmethods__["pos"] = _goldenrecord.VLabel_pos_set
    __swig_getmethods__["pos"] = _goldenrecord.VLabel_pos_get
    if _newclass:
        pos = _swig_property(_goldenrecord.VLabel_pos_get, _goldenrecord.VLabel_pos_set)

    def __init__(self, id: 'int', p: 'int'):
        this = _goldenrecord.new_VLabel(id, p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_VLabel
    __del__ = lambda self: None
VLabel_swigregister = _goldenrecord.VLabel_swigregister
VLabel_swigregister(VLabel)
cvar = _goldenrecord.cvar
regexes = cvar.regexes
regex_str = cvar.regex_str
start_special_token = cvar.start_special_token
end_special_token = cvar.end_special_token

class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertex_id"] = _goldenrecord.Vertex_vertex_id_set
    __swig_getmethods__["vertex_id"] = _goldenrecord.Vertex_vertex_id_get
    if _newclass:
        vertex_id = _swig_property(_goldenrecord.Vertex_vertex_id_get, _goldenrecord.Vertex_vertex_id_set)
    __swig_setmethods__["labels"] = _goldenrecord.Vertex_labels_set
    __swig_getmethods__["labels"] = _goldenrecord.Vertex_labels_get
    if _newclass:
        labels = _swig_property(_goldenrecord.Vertex_labels_get, _goldenrecord.Vertex_labels_set)

    def __init__(self, *args):
        this = _goldenrecord.new_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _goldenrecord.Vertex_swigregister
Vertex_swigregister(Vertex)

class ELabel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELabel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regex"] = _goldenrecord.ELabel_regex_set
    __swig_getmethods__["regex"] = _goldenrecord.ELabel_regex_get
    if _newclass:
        regex = _swig_property(_goldenrecord.ELabel_regex_get, _goldenrecord.ELabel_regex_set)
    __swig_setmethods__["index"] = _goldenrecord.ELabel_index_set
    __swig_getmethods__["index"] = _goldenrecord.ELabel_index_get
    if _newclass:
        index = _swig_property(_goldenrecord.ELabel_index_get, _goldenrecord.ELabel_index_set)
    __swig_setmethods__["constr"] = _goldenrecord.ELabel_constr_set
    __swig_getmethods__["constr"] = _goldenrecord.ELabel_constr_get
    if _newclass:
        constr = _swig_property(_goldenrecord.ELabel_constr_get, _goldenrecord.ELabel_constr_set)

    def __init__(self, *args):
        this = _goldenrecord.new_ELabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, o: 'ELabel') -> "bool":
        return _goldenrecord.ELabel___eq__(self, o)

    def __gt__(self, p: 'ELabel') -> "bool":
        return _goldenrecord.ELabel___gt__(self, p)
    __swig_destroy__ = _goldenrecord.delete_ELabel
    __del__ = lambda self: None
ELabel_swigregister = _goldenrecord.ELabel_swigregister
ELabel_swigregister(ELabel)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_id"] = _goldenrecord.Edge_src_id_set
    __swig_getmethods__["src_id"] = _goldenrecord.Edge_src_id_get
    if _newclass:
        src_id = _swig_property(_goldenrecord.Edge_src_id_get, _goldenrecord.Edge_src_id_set)
    __swig_setmethods__["end_id"] = _goldenrecord.Edge_end_id_set
    __swig_getmethods__["end_id"] = _goldenrecord.Edge_end_id_get
    if _newclass:
        end_id = _swig_property(_goldenrecord.Edge_end_id_get, _goldenrecord.Edge_end_id_set)
    __swig_setmethods__["labels"] = _goldenrecord.Edge_labels_set
    __swig_getmethods__["labels"] = _goldenrecord.Edge_labels_get
    if _newclass:
        labels = _swig_property(_goldenrecord.Edge_labels_get, _goldenrecord.Edge_labels_set)

    def __init__(self, *args):
        this = _goldenrecord.new_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_Edge
    __del__ = lambda self: None
Edge_swigregister = _goldenrecord.Edge_swigregister
Edge_swigregister(Edge)

class Pos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _goldenrecord.Pos_label_set
    __swig_getmethods__["label"] = _goldenrecord.Pos_label_get
    if _newclass:
        label = _swig_property(_goldenrecord.Pos_label_get, _goldenrecord.Pos_label_set)
    __swig_setmethods__["direction"] = _goldenrecord.Pos_direction_set
    __swig_getmethods__["direction"] = _goldenrecord.Pos_direction_get
    if _newclass:
        direction = _swig_property(_goldenrecord.Pos_direction_get, _goldenrecord.Pos_direction_set)

    def __init__(self, *args):
        this = _goldenrecord.new_Pos(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, o: 'Pos') -> "bool":
        return _goldenrecord.Pos___eq__(self, o)

    def __ne__(self, o: 'Pos') -> "bool":
        return _goldenrecord.Pos___ne__(self, o)

    def __gt__(self, p: 'Pos') -> "bool":
        return _goldenrecord.Pos___gt__(self, p)

    def __lt__(self, p: 'Pos') -> "bool":
        return _goldenrecord.Pos___lt__(self, p)
    __swig_destroy__ = _goldenrecord.delete_Pos
    __del__ = lambda self: None
Pos_swigregister = _goldenrecord.Pos_swigregister
Pos_swigregister(Pos)

class ELabelHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELabelHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELabelHash, name)
    __repr__ = _swig_repr

    def __call__(self, o: 'ELabel') -> "size_t":
        return _goldenrecord.ELabelHash___call__(self, o)

    def __init__(self):
        this = _goldenrecord.new_ELabelHash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_ELabelHash
    __del__ = lambda self: None
ELabelHash_swigregister = _goldenrecord.ELabelHash_swigregister
ELabelHash_swigregister(ELabelHash)

class Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["edges"] = _goldenrecord.Graph_edges_set
    __swig_getmethods__["edges"] = _goldenrecord.Graph_edges_get
    if _newclass:
        edges = _swig_property(_goldenrecord.Graph_edges_get, _goldenrecord.Graph_edges_set)
    __swig_setmethods__["nodes"] = _goldenrecord.Graph_nodes_set
    __swig_getmethods__["nodes"] = _goldenrecord.Graph_nodes_get
    if _newclass:
        nodes = _swig_property(_goldenrecord.Graph_nodes_get, _goldenrecord.Graph_nodes_set)
    __swig_setmethods__["all_pos"] = _goldenrecord.Graph_all_pos_set
    __swig_getmethods__["all_pos"] = _goldenrecord.Graph_all_pos_get
    if _newclass:
        all_pos = _swig_property(_goldenrecord.Graph_all_pos_get, _goldenrecord.Graph_all_pos_set)
    __swig_setmethods__["node2edge"] = _goldenrecord.Graph_node2edge_set
    __swig_getmethods__["node2edge"] = _goldenrecord.Graph_node2edge_get
    if _newclass:
        node2edge = _swig_property(_goldenrecord.Graph_node2edge_get, _goldenrecord.Graph_node2edge_set)
    __swig_setmethods__["rev_node2edge"] = _goldenrecord.Graph_rev_node2edge_set
    __swig_getmethods__["rev_node2edge"] = _goldenrecord.Graph_rev_node2edge_get
    if _newclass:
        rev_node2edge = _swig_property(_goldenrecord.Graph_rev_node2edge_get, _goldenrecord.Graph_rev_node2edge_set)
    __swig_setmethods__["umap_labels"] = _goldenrecord.Graph_umap_labels_set
    __swig_getmethods__["umap_labels"] = _goldenrecord.Graph_umap_labels_get
    if _newclass:
        umap_labels = _swig_property(_goldenrecord.Graph_umap_labels_get, _goldenrecord.Graph_umap_labels_set)

    def UmapIndex(self) -> "void":
        return _goldenrecord.Graph_UmapIndex(self)

    def GetMatchId(self, str: 'std::string const &', mid: 'int &', r: 'Regex const', exp: 'regex const &', match_map: 'unordered_map< pair< int,int >,vector< ELabel >,pair_hash > &') -> "void":
        return _goldenrecord.Graph_GetMatchId(self, str, mid, r, exp, match_map)

    def GenGraphStr(self, *args) -> "void":
        return _goldenrecord.Graph_GenGraphStr(self, *args)

    def getPosList(self, posList: 'vector< vector< Pos > > &') -> "void":
        return _goldenrecord.Graph_getPosList(self, posList)

    def getAdjacentMatrix(self) -> "void":
        return _goldenrecord.Graph_getAdjacentMatrix(self)

    def TestContainment(self, path: 'vector< pair< Pos,Pos > > const &', target: 'std::string const &', source: 'std::string const &') -> "bool":
        return _goldenrecord.Graph_TestContainment(self, path, target, source)

    def __init__(self):
        this = _goldenrecord.new_Graph()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_Graph
    __del__ = lambda self: None
Graph_swigregister = _goldenrecord.Graph_swigregister
Graph_swigregister(Graph)

class Elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pid"] = _goldenrecord.Elem_pid_set
    __swig_getmethods__["pid"] = _goldenrecord.Elem_pid_get
    if _newclass:
        pid = _swig_property(_goldenrecord.Elem_pid_get, _goldenrecord.Elem_pid_set)
    __swig_setmethods__["beg"] = _goldenrecord.Elem_beg_set
    __swig_getmethods__["beg"] = _goldenrecord.Elem_beg_get
    if _newclass:
        beg = _swig_property(_goldenrecord.Elem_beg_get, _goldenrecord.Elem_beg_set)
    __swig_setmethods__["end"] = _goldenrecord.Elem_end_set
    __swig_getmethods__["end"] = _goldenrecord.Elem_end_get
    if _newclass:
        end = _swig_property(_goldenrecord.Elem_end_get, _goldenrecord.Elem_end_set)

    def __init__(self, r: 'int', b: 'int', e: 'int'):
        this = _goldenrecord.new_Elem(r, b, e)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, e: 'Elem') -> "bool":
        return _goldenrecord.Elem___lt__(self, e)

    def __gt__(self, e: 'Elem') -> "bool":
        return _goldenrecord.Elem___gt__(self, e)

    def __eq__(self, e: 'Elem') -> "bool":
        return _goldenrecord.Elem___eq__(self, e)
    __swig_destroy__ = _goldenrecord.delete_Elem
    __del__ = lambda self: None
Elem_swigregister = _goldenrecord.Elem_swigregister
Elem_swigregister(Elem)

class DagEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DagEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DagEdge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_id"] = _goldenrecord.DagEdge_src_id_set
    __swig_getmethods__["src_id"] = _goldenrecord.DagEdge_src_id_get
    if _newclass:
        src_id = _swig_property(_goldenrecord.DagEdge_src_id_get, _goldenrecord.DagEdge_src_id_set)
    __swig_setmethods__["end_id"] = _goldenrecord.DagEdge_end_id_set
    __swig_getmethods__["end_id"] = _goldenrecord.DagEdge_end_id_get
    if _newclass:
        end_id = _swig_property(_goldenrecord.DagEdge_end_id_get, _goldenrecord.DagEdge_end_id_set)
    __swig_setmethods__["constant"] = _goldenrecord.DagEdge_constant_set
    __swig_getmethods__["constant"] = _goldenrecord.DagEdge_constant_get
    if _newclass:
        constant = _swig_property(_goldenrecord.DagEdge_constant_get, _goldenrecord.DagEdge_constant_set)
    __swig_setmethods__["prefixes"] = _goldenrecord.DagEdge_prefixes_set
    __swig_getmethods__["prefixes"] = _goldenrecord.DagEdge_prefixes_get
    if _newclass:
        prefixes = _swig_property(_goldenrecord.DagEdge_prefixes_get, _goldenrecord.DagEdge_prefixes_set)
    __swig_setmethods__["suffixes"] = _goldenrecord.DagEdge_suffixes_set
    __swig_getmethods__["suffixes"] = _goldenrecord.DagEdge_suffixes_get
    if _newclass:
        suffixes = _swig_property(_goldenrecord.DagEdge_suffixes_get, _goldenrecord.DagEdge_suffixes_set)
    __swig_setmethods__["inffixes"] = _goldenrecord.DagEdge_inffixes_set
    __swig_getmethods__["inffixes"] = _goldenrecord.DagEdge_inffixes_get
    if _newclass:
        inffixes = _swig_property(_goldenrecord.DagEdge_inffixes_get, _goldenrecord.DagEdge_inffixes_set)
    __swig_setmethods__["const_pos"] = _goldenrecord.DagEdge_const_pos_set
    __swig_getmethods__["const_pos"] = _goldenrecord.DagEdge_const_pos_get
    if _newclass:
        const_pos = _swig_property(_goldenrecord.DagEdge_const_pos_get, _goldenrecord.DagEdge_const_pos_set)
    __swig_setmethods__["input_pos"] = _goldenrecord.DagEdge_input_pos_set
    __swig_getmethods__["input_pos"] = _goldenrecord.DagEdge_input_pos_get
    if _newclass:
        input_pos = _swig_property(_goldenrecord.DagEdge_input_pos_get, _goldenrecord.DagEdge_input_pos_set)
    __swig_setmethods__["weight"] = _goldenrecord.DagEdge_weight_set
    __swig_getmethods__["weight"] = _goldenrecord.DagEdge_weight_get
    if _newclass:
        weight = _swig_property(_goldenrecord.DagEdge_weight_get, _goldenrecord.DagEdge_weight_set)

    def __init__(self, *args):
        this = _goldenrecord.new_DagEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_DagEdge
    __del__ = lambda self: None
DagEdge_swigregister = _goldenrecord.DagEdge_swigregister
DagEdge_swigregister(DagEdge)

class DAGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DAGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DAGraph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nodes"] = _goldenrecord.DAGraph_nodes_set
    __swig_getmethods__["nodes"] = _goldenrecord.DAGraph_nodes_get
    if _newclass:
        nodes = _swig_property(_goldenrecord.DAGraph_nodes_get, _goldenrecord.DAGraph_nodes_set)
    __swig_setmethods__["edges"] = _goldenrecord.DAGraph_edges_set
    __swig_getmethods__["edges"] = _goldenrecord.DAGraph_edges_get
    if _newclass:
        edges = _swig_property(_goldenrecord.DAGraph_edges_get, _goldenrecord.DAGraph_edges_set)
    __swig_setmethods__["rule_id"] = _goldenrecord.DAGraph_rule_id_set
    __swig_getmethods__["rule_id"] = _goldenrecord.DAGraph_rule_id_get
    if _newclass:
        rule_id = _swig_property(_goldenrecord.DAGraph_rule_id_get, _goldenrecord.DAGraph_rule_id_set)
    __swig_setmethods__["input"] = _goldenrecord.DAGraph_input_set
    __swig_getmethods__["input"] = _goldenrecord.DAGraph_input_get
    if _newclass:
        input = _swig_property(_goldenrecord.DAGraph_input_get, _goldenrecord.DAGraph_input_set)
    __swig_setmethods__["output"] = _goldenrecord.DAGraph_output_set
    __swig_getmethods__["output"] = _goldenrecord.DAGraph_output_get
    if _newclass:
        output = _swig_property(_goldenrecord.DAGraph_output_get, _goldenrecord.DAGraph_output_set)
    __swig_setmethods__["input_graph"] = _goldenrecord.DAGraph_input_graph_set
    __swig_getmethods__["input_graph"] = _goldenrecord.DAGraph_input_graph_get
    if _newclass:
        input_graph = _swig_property(_goldenrecord.DAGraph_input_graph_get, _goldenrecord.DAGraph_input_graph_set)
    __swig_setmethods__["starting_node_id"] = _goldenrecord.DAGraph_starting_node_id_set
    __swig_getmethods__["starting_node_id"] = _goldenrecord.DAGraph_starting_node_id_get
    if _newclass:
        starting_node_id = _swig_property(_goldenrecord.DAGraph_starting_node_id_get, _goldenrecord.DAGraph_starting_node_id_set)
    __swig_setmethods__["ending_node_id"] = _goldenrecord.DAGraph_ending_node_id_set
    __swig_getmethods__["ending_node_id"] = _goldenrecord.DAGraph_ending_node_id_get
    if _newclass:
        ending_node_id = _swig_property(_goldenrecord.DAGraph_ending_node_id_get, _goldenrecord.DAGraph_ending_node_id_set)
    __swig_setmethods__["dag_edge_adj"] = _goldenrecord.DAGraph_dag_edge_adj_set
    __swig_getmethods__["dag_edge_adj"] = _goldenrecord.DAGraph_dag_edge_adj_get
    if _newclass:
        dag_edge_adj = _swig_property(_goldenrecord.DAGraph_dag_edge_adj_get, _goldenrecord.DAGraph_dag_edge_adj_set)
    __swig_setmethods__["graphSize"] = _goldenrecord.DAGraph_graphSize_set
    __swig_getmethods__["graphSize"] = _goldenrecord.DAGraph_graphSize_get
    if _newclass:
        graphSize = _swig_property(_goldenrecord.DAGraph_graphSize_get, _goldenrecord.DAGraph_graphSize_set)
    __swig_setmethods__["nodeSize"] = _goldenrecord.DAGraph_nodeSize_set
    __swig_getmethods__["nodeSize"] = _goldenrecord.DAGraph_nodeSize_get
    if _newclass:
        nodeSize = _swig_property(_goldenrecord.DAGraph_nodeSize_get, _goldenrecord.DAGraph_nodeSize_set)
    __swig_setmethods__["edgeSize"] = _goldenrecord.DAGraph_edgeSize_set
    __swig_getmethods__["edgeSize"] = _goldenrecord.DAGraph_edgeSize_get
    if _newclass:
        edgeSize = _swig_property(_goldenrecord.DAGraph_edgeSize_get, _goldenrecord.DAGraph_edgeSize_set)

    def __init__(self, arg2: 'std::string const &', out: 'std::string const &', id: 'int const', valid_terms: 'unordered_map< std::string,pair< double,int > > const &'):
        this = _goldenrecord.new_DAGraph(arg2, out, id, valid_terms)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DynamicRanking(self, path: 'Path', synsizer: 'Synthesizer') -> "void":
        return _goldenrecord.DAGraph_DynamicRanking(self, path, synsizer)

    def getGraphSize(self) -> "uint64_t":
        return _goldenrecord.DAGraph_getGraphSize(self)
    __swig_destroy__ = _goldenrecord.delete_DAGraph
    __del__ = lambda self: None
DAGraph_swigregister = _goldenrecord.DAGraph_swigregister
DAGraph_swigregister(DAGraph)

class Synthesizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Synthesizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Synthesizer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["constr_index"] = _goldenrecord.Synthesizer_constr_index_set
    __swig_getmethods__["constr_index"] = _goldenrecord.Synthesizer_constr_index_get
    if _newclass:
        constr_index = _swig_property(_goldenrecord.Synthesizer_constr_index_get, _goldenrecord.Synthesizer_constr_index_set)
    __swig_setmethods__["cpos_index"] = _goldenrecord.Synthesizer_cpos_index_set
    __swig_getmethods__["cpos_index"] = _goldenrecord.Synthesizer_cpos_index_get
    if _newclass:
        cpos_index = _swig_property(_goldenrecord.Synthesizer_cpos_index_get, _goldenrecord.Synthesizer_cpos_index_set)
    __swig_setmethods__["substr_index"] = _goldenrecord.Synthesizer_substr_index_set
    __swig_getmethods__["substr_index"] = _goldenrecord.Synthesizer_substr_index_get
    if _newclass:
        substr_index = _swig_property(_goldenrecord.Synthesizer_substr_index_get, _goldenrecord.Synthesizer_substr_index_set)
    __swig_setmethods__["prefix_index"] = _goldenrecord.Synthesizer_prefix_index_set
    __swig_getmethods__["prefix_index"] = _goldenrecord.Synthesizer_prefix_index_get
    if _newclass:
        prefix_index = _swig_property(_goldenrecord.Synthesizer_prefix_index_get, _goldenrecord.Synthesizer_prefix_index_set)
    __swig_setmethods__["suffix_index"] = _goldenrecord.Synthesizer_suffix_index_set
    __swig_getmethods__["suffix_index"] = _goldenrecord.Synthesizer_suffix_index_get
    if _newclass:
        suffix_index = _swig_property(_goldenrecord.Synthesizer_suffix_index_get, _goldenrecord.Synthesizer_suffix_index_set)
    __swig_setmethods__["dags"] = _goldenrecord.Synthesizer_dags_set
    __swig_getmethods__["dags"] = _goldenrecord.Synthesizer_dags_get
    if _newclass:
        dags = _swig_property(_goldenrecord.Synthesizer_dags_get, _goldenrecord.Synthesizer_dags_set)
    __swig_setmethods__["thresholds"] = _goldenrecord.Synthesizer_thresholds_set
    __swig_getmethods__["thresholds"] = _goldenrecord.Synthesizer_thresholds_get
    if _newclass:
        thresholds = _swig_property(_goldenrecord.Synthesizer_thresholds_get, _goldenrecord.Synthesizer_thresholds_set)
    __swig_getmethods__["rules"] = _goldenrecord.Synthesizer_rules_get
    if _newclass:
        rules = _swig_property(_goldenrecord.Synthesizer_rules_get)

    def __init__(self, r: 'vector< pair< pair< std::string,std::string >,int > > const &', valid_terms: 'unordered_map< std::string,pair< double,int > > const &'):
        this = _goldenrecord.new_Synthesizer(r, valid_terms)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Indexing(self, valid_terms: 'unordered_map< std::string,pair< double,int > > const &') -> "void":
        return _goldenrecord.Synthesizer_Indexing(self, valid_terms)

    def InvIndex(self, dags: 'vector< DAGraph > const &') -> "void":
        return _goldenrecord.Synthesizer_InvIndex(self, dags)

    def SynAggregating(self, groups: 'unordered_map< Path,vector< int >,PathHash > &', rule_id_maps: 'vector< int > const &') -> "void":
        return _goldenrecord.Synthesizer_SynAggregating(self, groups, rule_id_maps)
    __swig_destroy__ = _goldenrecord.delete_Synthesizer
    __del__ = lambda self: None
Synthesizer_swigregister = _goldenrecord.Synthesizer_swigregister
Synthesizer_swigregister(Synthesizer)

class Path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _goldenrecord.Path_path_set
    __swig_getmethods__["path"] = _goldenrecord.Path_path_get
    if _newclass:
        path = _swig_property(_goldenrecord.Path_path_get, _goldenrecord.Path_path_set)

    def __eq__(self, p2: 'Path') -> "bool":
        return _goldenrecord.Path___eq__(self, p2)

    def __ne__(self, p2: 'Path') -> "bool":
        return _goldenrecord.Path___ne__(self, p2)

    def __lt__(self, p2: 'Path') -> "bool":
        return _goldenrecord.Path___lt__(self, p2)

    def __gt__(self, p2: 'Path') -> "bool":
        return _goldenrecord.Path___gt__(self, p2)

    def __init__(self):
        this = _goldenrecord.new_Path()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_Path
    __del__ = lambda self: None
Path_swigregister = _goldenrecord.Path_swigregister
Path_swigregister(Path)

class PathHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathHash, name)
    __repr__ = _swig_repr

    def __call__(self, p: 'Path') -> "size_t":
        return _goldenrecord.PathHash___call__(self, p)

    def __init__(self):
        this = _goldenrecord.new_PathHash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_PathHash
    __del__ = lambda self: None
PathHash_swigregister = _goldenrecord.PathHash_swigregister
PathHash_swigregister(PathHash)

class Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tid"] = _goldenrecord.Table_tid_set
    __swig_getmethods__["tid"] = _goldenrecord.Table_tid_get
    if _newclass:
        tid = _swig_property(_goldenrecord.Table_tid_get, _goldenrecord.Table_tid_set)
    __swig_setmethods__["row_no"] = _goldenrecord.Table_row_no_set
    __swig_getmethods__["row_no"] = _goldenrecord.Table_row_no_get
    if _newclass:
        row_no = _swig_property(_goldenrecord.Table_row_no_get, _goldenrecord.Table_row_no_set)
    __swig_setmethods__["col_no"] = _goldenrecord.Table_col_no_set
    __swig_getmethods__["col_no"] = _goldenrecord.Table_col_no_get
    if _newclass:
        col_no = _swig_property(_goldenrecord.Table_col_no_get, _goldenrecord.Table_col_no_set)
    __swig_setmethods__["table_name"] = _goldenrecord.Table_table_name_set
    __swig_getmethods__["table_name"] = _goldenrecord.Table_table_name_get
    if _newclass:
        table_name = _swig_property(_goldenrecord.Table_table_name_get, _goldenrecord.Table_table_name_set)
    __swig_setmethods__["schema"] = _goldenrecord.Table_schema_set
    __swig_getmethods__["schema"] = _goldenrecord.Table_schema_get
    if _newclass:
        schema = _swig_property(_goldenrecord.Table_schema_get, _goldenrecord.Table_schema_set)
    __swig_setmethods__["rows"] = _goldenrecord.Table_rows_set
    __swig_getmethods__["rows"] = _goldenrecord.Table_rows_get
    if _newclass:
        rows = _swig_property(_goldenrecord.Table_rows_get, _goldenrecord.Table_rows_set)
    __swig_setmethods__["cols"] = _goldenrecord.Table_cols_set
    __swig_getmethods__["cols"] = _goldenrecord.Table_cols_get
    if _newclass:
        cols = _swig_property(_goldenrecord.Table_cols_get, _goldenrecord.Table_cols_set)
    __swig_setmethods__["type"] = _goldenrecord.Table_type_set
    __swig_getmethods__["type"] = _goldenrecord.Table_type_get
    if _newclass:
        type = _swig_property(_goldenrecord.Table_type_get, _goldenrecord.Table_type_set)
    __swig_setmethods__["isUnique"] = _goldenrecord.Table_isUnique_set
    __swig_getmethods__["isUnique"] = _goldenrecord.Table_isUnique_get
    if _newclass:
        isUnique = _swig_property(_goldenrecord.Table_isUnique_get, _goldenrecord.Table_isUnique_set)
    __swig_setmethods__["isKeyCand"] = _goldenrecord.Table_isKeyCand_set
    __swig_getmethods__["isKeyCand"] = _goldenrecord.Table_isKeyCand_get
    if _newclass:
        isKeyCand = _swig_property(_goldenrecord.Table_isKeyCand_get, _goldenrecord.Table_isKeyCand_set)
    __swig_setmethods__["hasNull"] = _goldenrecord.Table_hasNull_set
    __swig_getmethods__["hasNull"] = _goldenrecord.Table_hasNull_get
    if _newclass:
        hasNull = _swig_property(_goldenrecord.Table_hasNull_get, _goldenrecord.Table_hasNull_set)
    __swig_setmethods__["notNullNum"] = _goldenrecord.Table_notNullNum_set
    __swig_getmethods__["notNullNum"] = _goldenrecord.Table_notNullNum_get
    if _newclass:
        notNullNum = _swig_property(_goldenrecord.Table_notNullNum_get, _goldenrecord.Table_notNullNum_set)

    def __init__(self, *args):
        this = _goldenrecord.new_Table(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Profile(self) -> "void":
        return _goldenrecord.Table_Profile(self)

    def OutputCSV(self, filename: 'std::string const &') -> "void":
        return _goldenrecord.Table_OutputCSV(self, filename)
    __swig_destroy__ = _goldenrecord.delete_Table
    __del__ = lambda self: None
Table_swigregister = _goldenrecord.Table_swigregister
Table_swigregister(Table)

INT_TYPE_THRESH = _goldenrecord.INT_TYPE_THRESH
UNIQUE_THRESH = _goldenrecord.UNIQUE_THRESH
EPS = _goldenrecord.EPS
MAX_PATH_LENGTH = _goldenrecord.MAX_PATH_LENGTH
PRUNE_BY_STRUCTURE_THRESHOLD = _goldenrecord.PRUNE_BY_STRUCTURE_THRESHOLD
PRUNE_BY_STRUCTURE_GROUP_NUM = _goldenrecord.PRUNE_BY_STRUCTURE_GROUP_NUM
MAX_CONSTANT_LENGTH = _goldenrecord.MAX_CONSTANT_LENGTH
GLOBAL_FREQUENCY_THRESHOLD = _goldenrecord.GLOBAL_FREQUENCY_THRESHOLD
LOCAL_FREQUENCY_THRESHOLD = _goldenrecord.LOCAL_FREQUENCY_THRESHOLD
MAX_NUMBER_OF_RULES = _goldenrecord.MAX_NUMBER_OF_RULES
AGG_REGEX_NUM = _goldenrecord.AGG_REGEX_NUM
class pair_hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_hash, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _goldenrecord.new_pair_hash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_pair_hash
    __del__ = lambda self: None
pair_hash_swigregister = _goldenrecord.pair_hash_swigregister
pair_hash_swigregister(pair_hash)

class Wrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wrapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxLength"] = _goldenrecord.Wrapper_maxLength_set
    __swig_getmethods__["maxLength"] = _goldenrecord.Wrapper_maxLength_get
    if _newclass:
        maxLength = _swig_property(_goldenrecord.Wrapper_maxLength_get, _goldenrecord.Wrapper_maxLength_set)
    __swig_setmethods__["matrix"] = _goldenrecord.Wrapper_matrix_set
    __swig_getmethods__["matrix"] = _goldenrecord.Wrapper_matrix_get
    if _newclass:
        matrix = _swig_property(_goldenrecord.Wrapper_matrix_get, _goldenrecord.Wrapper_matrix_set)
    if _newclass:
        FindReplace = staticmethod(_goldenrecord.Wrapper_FindReplace)
    else:
        FindReplace = _goldenrecord.Wrapper_FindReplace
    __swig_setmethods__["agg_regex_str"] = _goldenrecord.Wrapper_agg_regex_str_set
    __swig_getmethods__["agg_regex_str"] = _goldenrecord.Wrapper_agg_regex_str_get
    if _newclass:
        agg_regex_str = _swig_property(_goldenrecord.Wrapper_agg_regex_str_get, _goldenrecord.Wrapper_agg_regex_str_set)
    __swig_setmethods__["agg_replace_str"] = _goldenrecord.Wrapper_agg_replace_str_set
    __swig_getmethods__["agg_replace_str"] = _goldenrecord.Wrapper_agg_replace_str_get
    if _newclass:
        agg_replace_str = _swig_property(_goldenrecord.Wrapper_agg_replace_str_get, _goldenrecord.Wrapper_agg_replace_str_set)
    if _newclass:
        logTime = staticmethod(_goldenrecord.Wrapper_logTime)
    else:
        logTime = _goldenrecord.Wrapper_logTime
    __swig_setmethods__["agg_regexes"] = _goldenrecord.Wrapper_agg_regexes_set
    __swig_getmethods__["agg_regexes"] = _goldenrecord.Wrapper_agg_regexes_get
    if _newclass:
        agg_regexes = _swig_property(_goldenrecord.Wrapper_agg_regexes_get, _goldenrecord.Wrapper_agg_regexes_set)
    if _newclass:
        print_green = staticmethod(_goldenrecord.Wrapper_print_green)
    else:
        print_green = _goldenrecord.Wrapper_print_green
    if _newclass:
        strToTokens = staticmethod(_goldenrecord.Wrapper_strToTokens)
    else:
        strToTokens = _goldenrecord.Wrapper_strToTokens

    def __init__(self):
        this = _goldenrecord.new_Wrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _goldenrecord.delete_Wrapper
    __del__ = lambda self: None
Wrapper_swigregister = _goldenrecord.Wrapper_swigregister
Wrapper_swigregister(Wrapper)

def Wrapper_FindReplace(str: 'std::string const &', exp: 'regex const &', replace: 'std::string const &') -> "std::string":
    return _goldenrecord.Wrapper_FindReplace(str, exp, replace)
Wrapper_FindReplace = _goldenrecord.Wrapper_FindReplace

def Wrapper_logTime(begin: 'timeval &', end: 'timeval &', log: 'std::string const &') -> "void":
    return _goldenrecord.Wrapper_logTime(begin, end, log)
Wrapper_logTime = _goldenrecord.Wrapper_logTime

def Wrapper_print_green(s: 'std::string const &') -> "void":
    return _goldenrecord.Wrapper_print_green(s)
Wrapper_print_green = _goldenrecord.Wrapper_print_green

def Wrapper_strToTokens(s: 'std::string const &', res: 'vector< std::string > &', delims: 'std::string const &') -> "void":
    return _goldenrecord.Wrapper_strToTokens(s, res, delims)
Wrapper_strToTokens = _goldenrecord.Wrapper_strToTokens

class Consolidation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Consolidation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Consolidation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cluster_id_name"] = _goldenrecord.Consolidation_cluster_id_name_set
    __swig_getmethods__["cluster_id_name"] = _goldenrecord.Consolidation_cluster_id_name_get
    if _newclass:
        cluster_id_name = _swig_property(_goldenrecord.Consolidation_cluster_id_name_get, _goldenrecord.Consolidation_cluster_id_name_set)
    __swig_setmethods__["csvfilepath"] = _goldenrecord.Consolidation_csvfilepath_set
    __swig_getmethods__["csvfilepath"] = _goldenrecord.Consolidation_csvfilepath_get
    if _newclass:
        csvfilepath = _swig_property(_goldenrecord.Consolidation_csvfilepath_get, _goldenrecord.Consolidation_csvfilepath_set)
    __swig_setmethods__["csvreader"] = _goldenrecord.Consolidation_csvreader_set
    __swig_getmethods__["csvreader"] = _goldenrecord.Consolidation_csvreader_get
    if _newclass:
        csvreader = _swig_property(_goldenrecord.Consolidation_csvreader_get, _goldenrecord.Consolidation_csvreader_set)
    __swig_setmethods__["number_of_tables"] = _goldenrecord.Consolidation_number_of_tables_set
    __swig_getmethods__["number_of_tables"] = _goldenrecord.Consolidation_number_of_tables_get
    if _newclass:
        number_of_tables = _swig_property(_goldenrecord.Consolidation_number_of_tables_get, _goldenrecord.Consolidation_number_of_tables_set)
    __swig_setmethods__["cluster_id_col"] = _goldenrecord.Consolidation_cluster_id_col_set
    __swig_getmethods__["cluster_id_col"] = _goldenrecord.Consolidation_cluster_id_col_get
    if _newclass:
        cluster_id_col = _swig_property(_goldenrecord.Consolidation_cluster_id_col_get, _goldenrecord.Consolidation_cluster_id_col_set)
    __swig_setmethods__["clusters"] = _goldenrecord.Consolidation_clusters_set
    __swig_getmethods__["clusters"] = _goldenrecord.Consolidation_clusters_get
    if _newclass:
        clusters = _swig_property(_goldenrecord.Consolidation_clusters_get, _goldenrecord.Consolidation_clusters_set)
    __swig_setmethods__["agg"] = _goldenrecord.Consolidation_agg_set
    __swig_getmethods__["agg"] = _goldenrecord.Consolidation_agg_get
    if _newclass:
        agg = _swig_property(_goldenrecord.Consolidation_agg_get, _goldenrecord.Consolidation_agg_set)
    __swig_setmethods__["rules"] = _goldenrecord.Consolidation_rules_set
    __swig_getmethods__["rules"] = _goldenrecord.Consolidation_rules_get
    if _newclass:
        rules = _swig_property(_goldenrecord.Consolidation_rules_get, _goldenrecord.Consolidation_rules_set)
    __swig_setmethods__["groupStatus"] = _goldenrecord.Consolidation_groupStatus_set
    __swig_getmethods__["groupStatus"] = _goldenrecord.Consolidation_groupStatus_get
    if _newclass:
        groupStatus = _swig_property(_goldenrecord.Consolidation_groupStatus_get, _goldenrecord.Consolidation_groupStatus_set)
    __swig_setmethods__["modification"] = _goldenrecord.Consolidation_modification_set
    __swig_getmethods__["modification"] = _goldenrecord.Consolidation_modification_get
    if _newclass:
        modification = _swig_property(_goldenrecord.Consolidation_modification_get, _goldenrecord.Consolidation_modification_set)
    __swig_setmethods__["termRules"] = _goldenrecord.Consolidation_termRules_set
    __swig_getmethods__["termRules"] = _goldenrecord.Consolidation_termRules_get
    if _newclass:
        termRules = _swig_property(_goldenrecord.Consolidation_termRules_get, _goldenrecord.Consolidation_termRules_set)

    def __init__(self, filepath: 'std::string', cname: 'std::string'):
        this = _goldenrecord.new_Consolidation(filepath, cname)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TryNextTable(self, i: 'int') -> "std::string":
        return _goldenrecord.Consolidation_TryNextTable(self, i)

    def ProfileColumn(self, i: 'int', col_id: 'int') -> "std::string":
        return _goldenrecord.Consolidation_ProfileColumn(self, i, col_id)

    def TryNextColumn(self, i: 'int', col_id: 'int', skip: 'std::string') -> "std::string":
        return _goldenrecord.Consolidation_TryNextColumn(self, i, col_id, skip)

    def ShowNextCluster(self) -> "std::string":
        return _goldenrecord.Consolidation_ShowNextCluster(self)

    def ApplyCluster(self, i: 'int', col_id: 'int', applied_group_num: 'int', max_group_id: 'int', tmp: 'std::string') -> "std::string":
        return _goldenrecord.Consolidation_ApplyCluster(self, i, col_id, applied_group_num, max_group_id, tmp)

    def MaterializeTable(self, i: 'int', outfilepath: 'std::string') -> "void":
        return _goldenrecord.Consolidation_MaterializeTable(self, i, outfilepath)
    __swig_destroy__ = _goldenrecord.delete_Consolidation
    __del__ = lambda self: None
Consolidation_swigregister = _goldenrecord.Consolidation_swigregister
Consolidation_swigregister(Consolidation)

# This file is compatible with both classic and new-style classes.


